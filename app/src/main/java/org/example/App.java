/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import java.util.ArrayList;
import java.util.List;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void testFirstAlgorithm()
    {
        CountingCards cards = new CountingCards();
        List<Integer> arr1 = new ArrayList<>();
        int n = 0;

        for(int i = 0; i < 10; i++){
            arr1.add(i);
        }

        System.out.println("Begin 10 trial\n");
        long startTime = System.nanoTime();
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        long endTime = System.nanoTime();
        long duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 100 trial\n");
        for(int i = 0; i < 100; i++){
            arr1.add(i);
        }
        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 250 trial\n");
        for(int i = 0; i < 250; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 500 trial");
        for(int i = 0; i < 500; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffle(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");
    }


    public static void testSecondAlgorithm()
    {
        CountingCards cards = new CountingCards();
        List<Integer> arr1 = new ArrayList<>();
        int n = 0;

        System.out.println("Print 10 trial\n");
        for(int i = 0; i < 10; i++){
            arr1.add(i);
        }

        long startTime = System.nanoTime();
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        long endTime = System.nanoTime();
        long duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 100 trial\n");
        for(int i = 0; i < 100; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 250 trial\n");
        for(int i = 0; i < 250; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBetter(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

    }


    public static void testThirdAlgorithm()
    {
        CountingCards cards = new CountingCards();
        List<Integer> arr1 = new ArrayList<>();
        int n = 0;

        System.out.println("Print 10 trial\n");
        for(int i = 0; i < 10; i++){
            arr1.add(i);
        }

        long startTime = System.nanoTime();
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        long endTime = System.nanoTime();
        long duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 100 trial\n");
        for(int i = 0; i < 100; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 250 trial\n");
        for(int i = 0; i < 250; i++){
            arr1.add(i);
        }

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");


        System.out.println("Begin 500 trial\n");
        for(int i = 0; i < 500; i++){
            arr1.add(i);
        }
        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

        startTime = System.nanoTime();
        n = 0;
        while(n < 4){
            arr1 = cards.shuffleBest(arr1);
            //System.out.println(arr1);
            n++;
        }
        endTime = System.nanoTime();
        duration = endTime - startTime;
        System.out.println(duration + " ns\n");

    }


    public static void main(String[] args) {
        //testFirstAlgorithm();
        testSecondAlgorithm();
        //testThirdAlgorithm();
    }
}
